<?

add_action('wp_enqueue_scripts', 'add_ajaxurl_to_frontend_scripts');

function add_ajaxurl_to_frontend_scripts() {
    wp_localize_script('jquery', 'ajax_object', array('ajaxurl' => admin_url('admin-ajax.php')));
}

// Shortcodes for catalog table and favorites table
add_shortcode('catalog_table', 'show_catalog_table');
add_shortcode('favorites_table', 'show_favorites_table');

// Display the catalog table
function show_catalog_table() {
    return create_catalog_table(false);
}

// Display the favorites table
function show_favorites_table() {
    return create_catalog_table(true);
}

// Create the catalog table
function create_catalog_table($favorites_only = false) {
    global $current_user;
    wp_get_current_user();

    if (!is_user_logged_in()) {
        return '<p>Please log in to view this content.</p>';
    }

    wp_enqueue_style('bootstrap', 'https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css');
    wp_enqueue_script('jquery');
    wp_enqueue_script('bootstrap', 'https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js', array('jquery'), '4.5.2', true);

    ob_start();

    ?>
    <div class="catalog-table-container">
        <input type="hidden" class="catalog-user-id" value="<?php echo $current_user->ID; ?>">
        <input type="hidden" class="favorites-only" value="<?php echo $favorites_only ? '1' : '0'; ?>">
        <div class="row mb-3">
			<div class="col-md-12">
				<label for="search-input">Search:</label>
				<input type="text" class="form-control search-input" id="search-input" placeholder="Search by item title">
			</div>
		</div>
		<div class="row mb-3">
    <div class="col-md-4">
        <label for="item-category-filter">Category:</label>
        <?php
        $categories = get_terms(array('taxonomy' => 'item-category', 'hide_empty' => false));
        ?>
        <select class="form-control item-category-filter" id="item-category-filter">
            <option value="">All Categories</option>
            <?php foreach ($categories as $category) : ?>
                <option value="<?php echo $category->term_id; ?>"><?php echo $category->name; ?></option>
            <?php endforeach; ?>
        </select>
    </div>
    <div class="col-md-4">
		<label for="letter-dropdown">Initial Letter:</label>
		<select class="form-control letter-filter" id="letter-dropdown">
			<option value="">All Letters</option>
			<?php for ($i = 65; $i <= 90; $i++) : ?>
				<option value="<?php echo chr($i); ?>"><?php echo chr($i); ?></option>
			<?php endfor; ?>
		</select>
		</div>
    <div class="col-md-4 d-flex align-items-end">
        <button class="btn btn-primary apply-filters">Apply Filters</button>
    </div>
</div>

<div class="mbatt-table-responsive">
    <table class="table table-striped">
        <thead>
            <tr>
                <th class="image-header">Image</th>
                <th class="category-header">Category</th>
                <th class="title-header">Title</th>
                <th class="excerpt-header">Excerpt</th>
                <th class="content-header">Content</th>
                <th class="ny-state-taxable-header">NY State Taxable</th>
                <th class="local-non-nyc-header">Local Non-NYC</th>
                <th class="local-nyc-header">Local NYC</th>
                <th class="favorites-header">Favorites</th>
                <th class="notes-header">Notes</th>
            </tr>
        </thead>
        <tbody class="item-results">
            <!-- AJAX will populate the table rows here -->
        </tbody>
    </table>
</div>

<!-- Pagination -->
<div class="d-flex justify-content-center">
    <nav aria-label="Page navigation">
        <ul class="pagination"></ul>
    </nav>
</div>

<!-- Modals -->
<!-- Favorite Modal -->
<div class="modal fade" id="favoriteModal" tabindex="-1" role="dialog" aria-labelledby="favoriteModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-body">
                <!-- Favorite modal content generated by AJAX -->
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<!-- Notes Modal -->
<div class="modal fade" id="notesModal" tabindex="-1" role="dialog" aria-labelledby="notesModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="notesModalLabel">Notes</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <input type="hidden" id="notes-item-id" value="">
                <textarea class="form-control item-notes-textarea" id="item-notes-textarea" rows="5"></textarea>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary save-notes">Save Notes</button>
            </div>
        </div>
    </div>
</div>
        

    </div>
    <?php
    $table_output = ob_get_clean();	
    return $table_output;
}

// Fetch items using AJAX
add_action('wp_ajax_fetch_items', 'fetch_items_callback');
add_action('wp_ajax_nopriv_fetch_items', 'fetch_items_callback');

function fetch_items_callback() {
    global $current_user;
    wp_get_current_user();

    if (!is_user_logged_in()) {
        wp_die('Please log in to view this content.');
    }
	
    // Gather filter and pagination information from AJAX request
    $search_term = isset($_POST['search_term']) ? sanitize_text_field($_POST['search_term']) : '';
    $category_filter = isset($_POST['category_filter']) ? sanitize_text_field($_POST['category_filter']) : '';
    $letter_filter = isset($_POST['letter_filter']) ? sanitize_text_field($_POST['letter_filter']) : '';
    $current_page = isset($_POST['current_page']) ? intval($_POST['current_page']) : 1;
    $items_per_page = 10; // You can set a different number if you need

    // Build WP_Query args array based on filters, pagination, and favorites
    $args = array(
        'post_type' => 'item',
        'tax_query' => $category_filter ? array(
            array(
                'taxonomy' => 'item-category',
                'field'    => 'term_id',
                'terms'    => $category_filter,
            )
        ) : '',
        'posts_per_page' => $items_per_page,
        'paged' => $current_page,
        'orderby' => 'title',
        'order' => 'ASC',
		's' => $search_term,
    );

    if ($letter_filter) {
        $args['title_first_letter'] = $letter_filter;
        add_filter('posts_where', 'filter_title_first_letter', 10, 2);
    }

    // Fetch items based on query
    $query = new WP_Query($args);

    // Remove the filter to not affect other queries
    if ($letter_filter) {
        remove_filter('posts_where', 'filter_title_first_letter', 10);
    }

    // Filter function for title first letter
    function filter_title_first_letter($where, $query)
    {
        global $wpdb;
        $letter_filter = $query->get('title_first_letter');
        if ($letter_filter) {
            $where .= $wpdb->prepare(
                " AND LEFT( {$wpdb->posts}.post_title, 1 ) = %s",
                $letter_filter
            );
        }
        return $where;
    }

    // Generate the table HTML with fetched items
    while ($query->have_posts()) {
        $query->the_post();
        // Create the table rows and cells
        // Get item information
        $item_id = get_the_ID();
        $item_title = get_the_title();
        $item_excerpt = get_the_excerpt();
        $item_content = get_the_content();
        $item_image = get_the_post_thumbnail_url($item_id, 'thumbnail');
        $terms = get_the_terms($item_id, 'item-category');
        $item_category = $terms ? $terms[0]->name : '';
        $item_ny_state_taxable = get_post_meta($item_id, 'ny_state_taxable', true);
        $item_local_non_nyc = get_post_meta($item_id, 'local_non_nyc', true);
        $item_local_nyc = get_post_meta($item_id, 'local_nyc', true);

        // User favorites and notes
        $favorites = get_user_meta($current_user->ID, 'item_favorites', true);
        $notes = get_user_meta($current_user->ID, 'item_notes', true);
        $is_favorite = in_array($item_id, (array)$favorites);
        $item_note = isset($notes[$item_id]) ? $notes[$item_id] : '';

        echo '<tr>';
        echo '<td class="image-cell"><img src="' . esc_url($item_image) . '" alt="' . esc_attr($item_title) . '"></td>';
        echo '<td class="category-cell">' . esc_html($item_category) . '</td>';
        echo '<td class="title-cell">' . esc_html($item_title) . '</td>';
        echo '<td class="excerpt-cell">' . esc_html($item_excerpt) . '</td>';
        echo '<td class="content-cell">' . wp_kses_post($item_content) . '</td>';
        echo '<td class="ny-state-taxable-cell ' . esc_attr($item_ny_state_taxable) . '">' . esc_html($item_ny_state_taxable) . '</td>';
        echo '<td class="local-non-nyc-cell ' . esc_attr($item_local_non_nyc) . '">' . esc_html($item_local_non_nyc) . '</td>';
        echo '<td class="local-nyc-cell ' . esc_attr($item_local_nyc) . '">' . esc_html($item_local_nyc) . '</td>';
        echo '<td class="favorites-cell">';
        echo '<input type="checkbox" class="favorite-checkbox" data-item-id="' . esc_attr($item_id) . '"';
        echo $is_favorite ? ' checked' : '';
        echo '></td>';
        echo '<td class="notes-cell">';
        $button_text = $item_note ? 'Edit' : 'Add';
		echo '<button class="btn btn-sm btn-outline-primary notes-button" data-item-id="' . esc_attr($item_id) . '"';
		echo ' data-item-title="' . esc_attr($item_title) . '" data-notes="' . esc_attr($item_note) . '">' . $button_text . '</button>';
        echo '</td>';
        echo '</tr>';

	}

    // Close the loop and fetch pagination information
	wp_reset_query();

    // Print table HTML and pagination information
	wp_die();
}

// Update favorites using AJAX
add_action('wp_ajax_update_favorites', 'update_favorites_callback');
add_action('wp_ajax_nopriv_update_favorites', 'update_favorites_callback');

function update_favorites_callback() {
    global $current_user;
    wp_get_current_user();

    if (!is_user_logged_in()) {
        wp_die('Please log in to update your favorites.');
    }

	// Update favorites for the user based on AJAX request
    // Get item ID and favorites action from the AJAX request
    $item_id = isset($_POST['item_id']) ? intval($_POST['item_id']) : 0;
    $action = isset($_POST['action_type']) ? sanitize_text_field($_POST['action_type']) : '';

    // Check if valid data was sent
    if ($item_id > 0 && in_array($action, array('add', 'remove'))) {
        // Get the current user favorites
        $favorites = get_user_meta($current_user->ID, 'item_favorites', true);
        if (!is_array($favorites)) {
            $favorites = array();
        }

        // Update the user favorites
        if ($action === 'add') {
            if (!in_array($item_id, $favorites)) {
                $favorites[] = $item_id;
            }
        } else {
            $index = array_search($item_id, $favorites);
            if ($index !== false) {
                unset($favorites[$index]);
            }
        }

        // Save the updated favorites
        update_user_meta($current_user->ID, 'item_favorites', $favorites);
        echo 'success';
    } else {
        echo 'error';
    }

	wp_die();
}

// Update item notes using AJAX
add_action('wp_ajax_update_notes', 'update_notes_callback');
add_action('wp_ajax_nopriv_update_notes', 'update_notes_callback');

function update_notes_callback() {
    global $current_user;
    wp_get_current_user();

    if (!is_user_logged_in()) {
        wp_die('Please log in to update your notes.');
    }

    // Get item ID and new notes from the AJAX request
    $item_id = isset($_POST['item_id']) ? intval($_POST['item_id']) : 0;
    $new_notes = isset($_POST['notes']) ? sanitize_textarea_field($_POST['notes']) : '';

    // Check if valid data was sent
    if ($item_id > 0) {
        // Get the current user notes
        $notes = get_user_meta($current_user->ID, 'item_notes', true);
        if (!is_array($notes)) {
            $notes = array();
        }

        // Update the user notes for the specific item
        if ($new_notes !== '') {
            $notes[$item_id] = $new_notes;
        } else {
            unset($notes[$item_id]);
        }

        // Save the updated notes
        update_user_meta($current_user->ID, 'item_notes', $notes);
        echo 'success';
    } else {
        echo 'error';
    }
	wp_die();
}
